{"version":3,"sources":["../src/index.spec.js"],"names":["appCtx","ctx","reducer","state","reduxStatus","action","type","payload","makeStore","initialState","SyncPage","props","store","JSON","stringify","getState","dispatch","custom","React","Component","someAsyncAction","Promise","res","AsyncPage","verifyComponent","WrappedPage","getInitialProps","expect","initialProps","toBe","component","renderer","create","tree","toJSON","toMatchSnapshot","test","describe","MyApp","serializeState","serialized","deserializeState","deserialized","toBeTruthy"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport renderer from \"react-test-renderer\";\nimport withRedux from \"./index\";\n\nconst appCtx = {ctx: {}};\n\nconst reducer = (state = {reduxStatus: 'init'}, action) => {\n    switch (action.type) {\n        case 'FOO': // sync\n        case 'FOO_FULFILLED': // async\n            return {reduxStatus: action.payload};\n        default:\n            return state\n    }\n};\n\nconst makeStore = (initialState) => createStore(reducer, initialState, applyMiddleware(promiseMiddleware()));\n\nclass SyncPage extends React.Component {\n\n    static getInitialProps({ctx}) {\n        ctx.store.dispatch({type: 'FOO', payload: 'foo'});\n        return {custom: 'custom'};\n    }\n\n    render() {\n        const {store, ...props} = this.props;\n        return (\n            <div>\n                {JSON.stringify(props)}\n                {JSON.stringify(store.getState())}\n            </div>\n        )\n    }\n\n}\n\nconst someAsyncAction = ({\n    type: 'FOO',\n    payload: new Promise(res => res('foo'))\n});\n\nclass AsyncPage extends SyncPage {\n    static async getInitialProps({ctx}) {\n        await ctx.store.dispatch(someAsyncAction);\n        return {custom: 'custom'};\n    }\n}\n\nasync function verifyComponent(WrappedPage) {\n\n    // this is called by Next.js\n    const props = await WrappedPage.getInitialProps(appCtx);\n\n    expect(props.initialProps.custom).toBe('custom');\n    expect(props.initialState.reduxStatus).toBe('foo');\n\n    // this is called by Next.js\n    const component = renderer.create(<WrappedPage {...props}/>);\n\n    let tree = component.toJSON();\n    expect(tree).toMatchSnapshot();\n\n}\n\ntest('simple store integration', async () => {\n    const WrappedPage = withRedux(makeStore)(SyncPage);\n    await verifyComponent(WrappedPage);\n});\n\ntest('async store integration', async () => {\n    const WrappedPage = withRedux(makeStore)(AsyncPage);\n    await verifyComponent(WrappedPage);\n});\n\ndescribe('custom serialization', () => {\n    test('custom state serialization on the server and deserialization on the client', async () => {\n\n        class MyApp extends React.Component {\n            render(){\n                const {store} = this.props;\n                return (\n                    <div>{JSON.stringify(store.getState())}</div>\n                )\n            }\n        }\n\n        const WrappedPage = withRedux(makeStore, {\n            serializeState: state => ({ ...state, serialized: true }),\n            deserializeState: state => ({ ...state, deserialized: true })\n        })(MyApp);\n\n        const props = await WrappedPage.getInitialProps(appCtx);\n        expect(props.initialState.serialized).toBeTruthy();\n\n        // emulate client case\n        delete props.store;\n\n        // this is called by Next.js\n        const component = renderer.create(<WrappedPage {...props}/>);\n\n        let tree = component.toJSON();\n        expect(tree).toMatchSnapshot();\n\n    });\n});"],"file":"index.spec.js"}