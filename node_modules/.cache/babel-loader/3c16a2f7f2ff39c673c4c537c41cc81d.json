{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(runClockSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadDataSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAndLog),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\n/* global fetch */\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects';\nimport es6promise from 'es6-promise';\nimport 'isomorphic-unfetch';\nimport { getIndexList } from './axios/index';\nimport { actionTypes, failure, loadDataSuccess, tickClock } from './actions';\nes6promise.polyfill();\n\nfunction runClockSaga() {\n  return _regeneratorRuntime.wrap(function runClockSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return take(actionTypes.START_CLOCK);\n\n        case 2:\n          if (!true) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 5;\n          return put(tickClock(false));\n\n        case 5:\n          _context.next = 7;\n          return delay(1000);\n\n        case 7:\n          _context.next = 2;\n          break;\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction loadDataSaga() {\n  var res, data;\n  return _regeneratorRuntime.wrap(function loadDataSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(fetch, 'http://qa-admin.hxihuyu.com/bbs/bbsposts/getPostsListByIsHandpick?size=20&current=1&isHandpick=1');\n\n        case 3:\n          res = _context2.sent;\n          _context2.next = 6;\n          return res.json();\n\n        case 6:\n          data = _context2.sent;\n          _context2.next = 9;\n          return put(loadDataSuccess(data));\n\n        case 9:\n          _context2.next = 15;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put(failure(_context2.t0));\n\n        case 15:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\n\nfunction watchAndLog(getState) {\n  var action;\n  return _regeneratorRuntime.wrap(function watchAndLog$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!true) {\n            _context3.next = 7;\n            break;\n          }\n\n          _context3.next = 3;\n          return take('*');\n\n        case 3:\n          action = _context3.sent;\n          console.log('action', action); // console.log('state after', getState())\n\n          _context3.next = 0;\n          break;\n\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([call(runClockSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["/Users/wangwei/Documents/ssr-project/react-next-ssr/saga.js"],"names":["runClockSaga","loadDataSaga","watchAndLog","rootSaga","all","call","delay","put","take","takeLatest","es6promise","getIndexList","actionTypes","failure","loadDataSuccess","tickClock","polyfill","START_CLOCK","fetch","res","json","data","getState","action","console","log"],"mappings":";;;;yBAUWA,Y;;;yBAQAC,Y;;;yBASDC,W;;;yBAOCC,Q;;AAlCX;AAEA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,IAAhC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAO,oBAAP;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,SAAhD,QAAiE,WAAjE;AAEAL,UAAU,CAACM,QAAX;;AAEA,SAAWhB,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMQ,IAAI,CAACI,WAAW,CAACK,WAAb,CAAV;;AADF;AAAA,eAES,IAFT;AAAA;AAAA;AAAA;;AAAA;AAGI,iBAAMV,GAAG,CAACQ,SAAS,CAAC,KAAD,CAAV,CAAT;;AAHJ;AAAA;AAII,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAWL,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEgB,iBAAMI,IAAI,CAACa,KAAD,EAAQ,kGAAR,CAAV;;AAFhB;AAEUC,UAAAA,GAFV;AAAA;AAGiB,iBAAMA,GAAG,CAACC,IAAJ,EAAN;;AAHjB;AAGUC,UAAAA,IAHV;AAAA;AAII,iBAAMd,GAAG,CAACO,eAAe,CAACO,IAAD,CAAhB,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAMI,iBAAMd,GAAG,CAACM,OAAO,cAAR,CAAT;;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASA,SAAUX,WAAV,CAAsBoB,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACQ,IADR;AAAA;AAAA;AAAA;;AAAA;AAEmB,iBAAMd,IAAI,CAAC,GAAD,CAAV;;AAFnB;AAEUe,UAAAA,MAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB,EAHJ,CAII;;AAJJ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAWpB,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMC,GAAG,CAAC,CACRC,IAAI,CAACL,YAAD,CADI,CAAD,CAAT;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAeG,QAAf","sourcesContent":["/* global fetch */\n\nimport { all, call, delay, put, take, takeLatest } from 'redux-saga/effects'\nimport es6promise from 'es6-promise'\nimport 'isomorphic-unfetch'\nimport { getIndexList } from './axios/index'\nimport { actionTypes, failure, loadDataSuccess, tickClock } from './actions'\n\nes6promise.polyfill()\n\nfunction * runClockSaga () {\n  yield take(actionTypes.START_CLOCK)\n  while (true) {\n    yield put(tickClock(false))\n    yield delay(1000)\n  }\n}\n\nfunction * loadDataSaga () {\n  try {\n    const res = yield call(fetch, 'http://qa-admin.hxihuyu.com/bbs/bbsposts/getPostsListByIsHandpick?size=20&current=1&isHandpick=1');\n    const data = yield res.json();\n    yield put(loadDataSuccess(data))\n  } catch (err) {\n    yield put(failure(err))\n  }\n}\nfunction* watchAndLog(getState) {\n  while(true) {\n    const action = yield take('*')\n    console.log('action', action)\n    // console.log('state after', getState())\n  }\n}\nfunction * rootSaga () {\n  yield all([\n    call(runClockSaga),\n    // takeLatest(actionTypes.LOAD_DATA, loadDataSaga),\n  ])\n}\n\nexport default rootSaga\n"]},"metadata":{},"sourceType":"module"}